// ~/webppl-infer/webppl numberGame.wppl 

var kl = function(P, Q) {
    var statesP = P.support();
    var statesQ = Q.support();

    // TODO: assert that states1 = states2
    return sum(map(
        function(state) {
            var scoreP = P.score(state), scoreQ = Q.score(state);
            var probP = Math.exp(scoreP);
            // P(i) * log[ P(i) / Q(i) ] =  P(i) * [log(P(i) - log(Q(i)))]
            return probP * (scoreP - scoreQ);
        },
        statesP));
}

var isOdd = function(number){
	return (number % 2) == 1
}

var isEven = function(number){
	return (number % 2) == 0
}

var parseQuestion = function(question){
	var splt = question.split(' than ' )
	return splt.length==2 ? 
		{question: splt[0], target: splt[1].split('?')[0]} :
		{question: question}
}

var questions = {
	"is it even?": isEven,
	"is it odd?": isOdd,
	"is it greater": function(number, target){ return number > target },
	"is it less": function(number, target){ return number < target },
	"equal to": function(number, target){ return number == target }
}

var numberPrior = Infer({method: "enumerate"}, 
	function(){ return randomInteger(11); }
)

var getAnswer = function(number, question){
	var parsedQ = parseQuestion(question);
	var n = parsedQ.target ? [number, parsedQ.target] : number;
	var q = parsedQ.question;
	return apply(questions[q],n);
}

var answerPrior = function(currentPrior, question) {
	var number = sample(currentPrior);
	return getAnswer(number, question);
}

var update = function(currentPrior, question, answer){
	Infer({method: "enumerate"}, function(){
		var number = sample(currentPrior);
		var predictedAnswer = getAnswer(number, question);
		condition(answer == predictedAnswer);
		return number;
	})
}

var eig = function(currentPrior, question) {
	return expectation(Infer({method: "enumerate"}, function(){
		var possibleAnswer = answerPrior(currentPrior, question);
		var posterior = update(currentPrior, question, possibleAnswer);
		return kl(posterior, currentPrior);
	}));
	// => expected KL
};

map(function(q){ return eig(numberPrior, q) },
 ["is it even?", "is it odd?", "is it greater than 8?"])


// "is it even?".split(' than ')



// model(numberPrior, "is it even?")

// answerPrior(currentPrior, {question: question});

// KL(numberPosterior({question: "is it even?"}), numberPrior)

// numberPosterior({question: "is it even?", target:4})
// numberPrior
// model({question: "greater than?", target:4})

// var args = {question: "greater than?", target:4}
// args.target ? [args.target, n] : number


// var supp = EIG({
//     mNameSample: function() { uniformDraw(['preQuestion', 'postQuestion']),
//     mFuncs: {preQuestion: preQuestion, postQuestion: postQuestion},
//     xSample: function() { return questions },
//     ySample: function() { return randomInteger(10) }
// }).support();