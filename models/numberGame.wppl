// ~/webppl-infer/webppl numberGame.wppl 

var kl = function(P, Q) {
    var statesP = P.support();
    var statesQ = Q.support();

    // TODO: assert that states1 = states2
    return sum(map(
        function(state) {
            var scoreP = P.score(state), scoreQ = Q.score(state);
            var probP = Math.exp(scoreP);
            // P(i) * log[ P(i) / Q(i) ] =  P(i) * [log(P(i) - log(Q(i)))]
            return probP * (scoreP - scoreQ);
        },
        statesP));
}


var sampleInput = []
// {
// 	questionText: "is it odd?",
// 	questionData: [],
// 	answerValue: true
// },
// {
// 	questionText: "is it greater than #1?",
// 	questionData: [40],
// 	answerValue: true
// },
// {
// 	questionText: "is it greater than #1?",
// 	questionData: [60],
// 	answerValue: true
// },
// {
// 	questionText: "is it greater than #1?",
// 	questionData: [80],
// 	answerValue: false
// }]


var meaning = {
	"is it even?": function(number, args){ return (number % 2) == 0 },
	"is it odd?": function(number, args){ return (number % 2) == 1 },
	"is it greater than #1?": function(number, target){ return number > target[0] },
	"is it less than #1?": function(number, target){ return number < target[0] },
	"is it equal to #1?": function(number, target){ return number == target[0] }
}

var getAnswer = function(number, input){
	return apply(meaning[input.questionText], [number, input.questionData]);
}

var getAnswerPrior = function(currentPrior, question) {
	return Infer(
		{method: 'enumerate'},
		function() {
			var number = sample(currentPrior);
			return getAnswer(number, question);
		});
}

var update = function(currentPrior, question, answer){
	Infer({method: "enumerate"}, function(){
		var number = sample(currentPrior);
		var predictedAnswer = getAnswer(number, question);
		condition(answer == predictedAnswer);
		return number;
	})
}

var eig = function(currentPrior, question) {
	var answerPrior = getAnswerPrior(currentPrior, question);
	return expectation(Infer({method: "enumerate"}, function(){
		var possibleAnswer = sample(answerPrior);
		var posterior = update(currentPrior, question, possibleAnswer);
		return kl(posterior, currentPrior);
	}));
	// => expected KL
};

var currentBeliefs = Infer({method: "enumerate"},
	function(){
		var number = randomInteger(100);
		map(function(input) { 
			var predictedAnswer = getAnswer(number, input)
			condition(predictedAnswer == input.answerValue)
		}, sampleInput)
		return number
	}
)

var allQuestions = Infer({method: "enumerate"},
	function(){
		var q = uniformDraw(_.keys(meaning));
		return (["is it even?", "is it odd?"].indexOf(q) > -1)?
			{questionText: q, questionData:[]} :
			{questionText: q, questionData:[randomInteger(100)]}
	}
)



sort(map(function(q){ return _.extend(q, {eig: eig(currentBeliefs, q)}) }, 
	allQuestions.support() ),
function(a, b) {return a < b;}, function(o){return o.eig;})




