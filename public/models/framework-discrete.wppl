// Utils

var toLog2 = function(x) {
  return x / Math.log(2);
}


var KL = function(P, Q) {
  var statesP = P.support();
  var statesQ = Q.support();
  return sum(map(
    function(state) {
      var scoreP = toLog2(P.score(state));
      var scoreQ = toLog2(Q.score(state));
      var probP = Math.pow(2, scoreP);
      // P(i) * log[ P(i) / Q(i) ] =  P(i) * [log(P(i) - log(Q(i)))]
      return probP * (scoreP - scoreQ);
    },
    statesP));
};


// Question spec help (for domains)

var yesNoQuestion = function(question) {
  return {
    sampleQuestionData: question.sampleQuestionData || function(){ return []; },
    sampleAnswer: function(state, data) {
      var _sampleAnswer = question.sampleAnswer;
      return _sampleAnswer(state, data) ? "yes" : "no";
    },
    answerType: {
      discrete: {
        values: ["yes", "no"]
      }
    }
  };
};

var yesNoMaybeQuestion = function(question) {
  return {
    sampleQuestionData: question.sampleQuestionData || function(){ return []; },
    sampleAnswer: function(state, data) {
      var _sampleAnswer = question.sampleAnswer;
      if (flip(.2)) {
        return "maybe";
      } else {
        var answerIsTrue = _sampleAnswer(state, data);
        var noiseFlip = flip(.01);
        if (noiseFlip) {
          return answerIsTrue ? "no" : "yes";
        } else {
          return answerIsTrue ? "yes" : "no";
        }
      }
    },
    answerType: {
      discrete: {
        values: ["yes", "no", "maybe"]
      }
    }
  };
};



// Model

var update = function(statePrior, question, actualAnswer){
  var sampleAnswer = question.sampleAnswer;
  return Infer({method: "enumerate"}, function(){
    var state = sample(statePrior);
    var sampledAnswer = sampleAnswer(state, question.questionData);
    condition(actualAnswer === sampledAnswer);
    return state;
  });
};


var makeAnswerPrior = function(statePrior, question) {
  var sampleAnswer = question.sampleAnswer;
  return Infer(
    {method: 'enumerate'},
    function() {
      var state = sample(statePrior);
      return sampleAnswer(state, question.questionData);
    });
};


var expectedInfoGain = function(statePrior, question) {
  var answerPrior = makeAnswerPrior(statePrior, question);
  return expectation(Infer({method: "enumerate"}, function(){
    var answer = sample(answerPrior);
    var statePosterior = update(statePrior, question, answer);
    return KL(statePosterior, statePrior);
  }));
};


var questionExists = function(question, options) {
  var questions = options.history;
  var xs = map(
    function(question) {
      return options.renderQuestion(question);
    },
    questions);
  var x = options.renderQuestion(question);
  return (_.indexOf(xs, x) !== -1);
};


var generateQuestions = function(questionTypes, stateDist) {
  return Infer(
    {method: "enumerate"},
    function() {
      var questionText = uniformDraw(_.keys(questionTypes));
      var type = questionTypes[questionText];
      var sampleQuestionData = type.sampleQuestionData;
      return {
        questionText: questionText,
        questionData: sampleQuestionData(),
        sampleAnswer: type.sampleAnswer,
        answerType: type.answerType
      };
    }
  ).support();  
};


var model = function(questionTypes, statePrior, options) {
  
  // Options:
  // - renderQuestion
  // - history
  // - current
  
  console.log('Running in webppl with options', options);

  const history = options.history || [];

  var stateDist = Infer(
    {method: "enumerate"},
    function() {
      var state = statePrior();
      map(
        function(question) {
          var sampleAnswer = question.sampleAnswer;
          var sampledAnswer = sampleAnswer(state, question.questionData);
          condition(sampledAnswer === question.actualAnswer)
        },
        history);
      return state;
    }
  );

  var allQuestions = generateQuestions(questionTypes, stateDist);

  var addExpectedInfoGain = function(questions) {
    return map(
      function(question){
        return _.extend(
          question,
          {expectedInfoGain: expectedInfoGain(stateDist, question)});
      },
      questions);
  };

  var candidates = addExpectedInfoGain(allQuestions);

  var sortedCandidates = sort(
    candidates,
    function(a, b) { return a > b; },
    function(o) { return o.expectedInfoGain; });

  if (!options.history) {
    return {
      questions: sortedCandidates,
      MAPState: stateDist.MAP()
    };
  }

  var response = {
    questions: filter(
      function(question){
        return !questionExists(question, options);
      },
      sortedCandidates
    ),
    MAPState: stateDist.MAP().val,
    entropy: toLog2(stateDist.entropy())
  };

  return response;
};


var makeModel = function(domain) {
  return function(options) {
    return model(domain.questionTypes, domain.statePrior, options);
  }
};
